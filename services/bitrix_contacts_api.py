import os
import requests
from dotenv import load_dotenv
from utils.logger import setup_logger

logger = setup_logger()

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
ENV_PATH = os.path.normpath(os.path.join(CURRENT_DIR, "..", "config", "credentials.env"))

if not os.path.exists(ENV_PATH):
    raise FileNotFoundError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è: {ENV_PATH}")

load_dotenv(ENV_PATH)

BITRIX_BASE_URL = os.getenv("BITRIX_BASE_URL")
BITRIX_CONTACT_ADD = "crm.contact.add"
BITRIX_CONTACT_UPDATE = "crm.contact.update"
BITRIX_CONTACT_LIST = "crm.contact.list"

if not BITRIX_BASE_URL:
    raise ValueError("‚ùå BITRIX_BASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ credentials.env")


def bitrix_request(method_name: str, params: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Bitrix REST API"""
    url = BITRIX_BASE_URL.rstrip("/") + "/" + method_name
    try:
        r = requests.post(url, json=params or {}, timeout=25)
        r.raise_for_status()
        data = r.json()
        if "error" in data:
            logger.error(f"‚ùå Bitrix –æ—à–∏–±–∫–∞: {data}")
        return data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Bitrix ({method_name}): {e}")
        return None


def find_contact_by_hh_id(hh_id: str):
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ UF_CRM_1760959751 (HH_ID –æ—Ç–∫–ª–∏–∫–∞)"""
    logger.info(f"üîç –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å HH_ID –æ—Ç–∫–ª–∏–∫–∞: {hh_id}")
    params = {
        "filter": {"UF_CRM_1760959751": hh_id},
        "select": ["ID", "NAME", "LAST_NAME", "UF_CRM_1760959751"]
    }
    res = bitrix_request(BITRIX_CONTACT_LIST, params)
    result = res.get("result", []) if res else []
    if result:
        contact = result[0]
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact}")
        return contact
    logger.info("‚ûñ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None


def create_contact(contact_data: dict):
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç —Å HH_ –ø–æ–ª—è–º–∏"""
    logger.info(f"üßæ –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç: {contact_data.get('NAME')} {contact_data.get('LAST_NAME')}")
    res = bitrix_request(BITRIX_CONTACT_ADD, {"fields": contact_data})
    if res and res.get("result"):
        contact_id = res["result"]
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω, ID: {contact_id}")
        return contact_id
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: {res}")
    return None


def update_contact(contact_id: int, contact_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç —Å –Ω–æ–≤—ã–º–∏ HH_ –¥–∞–Ω–Ω—ã–º–∏"""
    logger.info(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç #{contact_id}")
    res = bitrix_request(BITRIX_CONTACT_UPDATE, {"id": contact_id, "fields": contact_data})
    if res and res.get("result"):
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç #{contact_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
        return True
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç #{contact_id}: {res}")
    return False
