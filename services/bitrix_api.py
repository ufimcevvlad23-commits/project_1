import os
import requests
from dotenv import load_dotenv
from utils.logger import setup_logger

logger = setup_logger()
print("üß© –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç bitrix_api.py:", __file__)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env) ===
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
ENV_PATH = os.path.normpath(os.path.join(CURRENT_DIR, "..", "config", "credentials.env"))

if not os.path.exists(ENV_PATH):
    raise FileNotFoundError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {ENV_PATH}")

load_dotenv(ENV_PATH)

BITRIX_BASE_URL   = os.getenv("BITRIX_BASE_URL")
BITRIX_DEAL_ADD   = os.getenv("BITRIX_DEAL_ADD", "crm.deal.add")
BITRIX_DEAL_UPDATE= os.getenv("BITRIX_DEAL_UPDATE", "crm.deal.update")
BITRIX_FILE_UPLOAD= os.getenv("BITRIX_FILE_UPLOAD", "disk.file.upload")
BITRIX_DEAL_LIST  = os.getenv("BITRIX_DEAL_LIST", "crm.deal.list")

# –í—ã–≤–æ–¥–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
print("=== Bitrix ENV ===")
print(f"BITRIX_BASE_URL: {BITRIX_BASE_URL}")
print(f"BITRIX_DEAL_ADD: {BITRIX_DEAL_ADD}")
print(f"BITRIX_DEAL_UPDATE: {BITRIX_DEAL_UPDATE}")
print("===================")

if not BITRIX_BASE_URL:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω BITRIX_BASE_URL –≤ credentials.env")


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Bitrix ===
def bitrix_request(method_name: str, params: dict = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Bitrix REST API"""
    if not BITRIX_BASE_URL:
        raise ValueError("‚ùå BITRIX_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω")

    if not method_name or method_name.strip().lower() == "none":
        raise ValueError(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Bitrix: {method_name}")

    url = BITRIX_BASE_URL.rstrip("/") + "/" + method_name.strip().lstrip("/")

    try:
        response = requests.post(url, json=params or {}, timeout=30)
        response.raise_for_status()
        data = response.json()
        if "error" in data:
            logger.error(f"‚ùå Bitrix –æ—à–∏–±–∫–∞: {data}")
        return data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Bitrix ({method_name}): {e}")
        return None


# === –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ===
def create_deal(data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ Bitrix"""
    logger.info(f"üßæ –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É: {data.get('TITLE')}")
    res = bitrix_request(BITRIX_DEAL_ADD, {"fields": data})
    if res and res.get("result"):
        deal_id = res["result"]
        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, ID: {deal_id}")
        return deal_id
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É: {res}")
    return None


# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ===
def update_deal(deal_id: int, fields: dict) -> bool:
    params = {"id": int(deal_id), "fields": fields}
    res = bitrix_request(BITRIX_DEAL_UPDATE, params)
    if res and res.get("result") is True:
        logger.info(f"‚ôªÔ∏è –°–¥–µ–ª–∫–∞ #{deal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}: {res}")
    return False


# === –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ===
def list_deals(filter_: dict = None, select: list = None, order: dict = None, start: int = 0):
    payload = {
        "filter": filter_ or {},
        "select": select or ["ID", "TITLE", "STAGE_ID"],
        "order": order or {"ID": "DESC"},
        "start": start
    }
    res = bitrix_request(BITRIX_DEAL_LIST, payload)
    if not res:
        return [], None
    return res.get("result", []), res.get("next")


# === –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –ø–æ UF (ID –æ—Ç–∫–ª–∏–∫–∞ HH) ===
def find_deal_by_hh_id(hh_response_id: str, hh_field_code: str):
    """
    –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä UF_CRM_1761217763) = hh_response_id
    """
    if not hh_response_id:
        return None

    start = 0
    while True:
        deals, next_start = list_deals(
            filter_={hh_field_code: hh_response_id},
            select=["ID", "TITLE", "STAGE_ID", hh_field_code],
            start=start
        )
        if deals:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é
            return deals[0]
        if next_start is None:
            break
        start = next_start
    return None


# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ PDF –≤ —Å–¥–µ–ª–∫—É ===
def upload_pdf_to_deal(deal_id: int, filepath: str):
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ —Å–¥–µ–ª–∫–µ"""
    if not os.path.exists(filepath):
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return None

    try:
        with open(filepath, "rb") as f:
            files = {"file": f}
            upload_url = BITRIX_BASE_URL.rstrip("/") + "/" + BITRIX_FILE_UPLOAD
            upload_res = requests.post(upload_url, files=files, timeout=60)
            upload_res.raise_for_status()
            file_data = upload_res.json()
            logger.info(f"üìé PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω: {filepath}")
            return file_data
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–¥–µ–ª–∫—É ===
def add_comment(deal_id: int, text: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–¥–µ–ª–∫—É"""
    params = {"id": int(deal_id), "fields": {"COMMENTS": text}}
    res = bitrix_request(BITRIX_DEAL_UPDATE, params)
    if res and res.get("result"):
        logger.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–¥–µ–ª–∫—É {deal_id}")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {res}")
