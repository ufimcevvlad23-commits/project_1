import os
import json
import requests
from utils.logger import setup_logger
from services.auth import get_valid_token

logger = setup_logger()

HH_API_BASE = "https://api.hh.ru"


def get_headers():
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        token = get_valid_token()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        token = os.getenv("HH_ACCESS_TOKEN")

    if not token:
        raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω access_token hh.ru")

    return {
        "User-Agent": "Bitrix-HH-Integration/1.0",
        "Authorization": f"Bearer {token}"
    }


def get_active_vacancies(employer_id="2688361", all_accessible=True):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    url = f"{HH_API_BASE}/employers/{employer_id}/vacancies/active"
    params = {"all_accessible": str(all_accessible).lower()}
    r = requests.get(url, headers=get_headers(), params=params, timeout=20)

    if r.status_code == 403:
        logger.error("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ API –∏ —Ç–æ–∫–µ–Ω hh.ru")
        r.raise_for_status()

    r.raise_for_status()
    data = r.json()
    items = data.get("items", [])
    logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
    return items


def get_collections(vacancy_id):
    """–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π (—ç—Ç–∞–ø–æ–≤ –æ—Ç–∫–ª–∏–∫–æ–≤) –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    url = f"{HH_API_BASE}/negotiations"
    params = {"vacancy_id": vacancy_id}
    r = requests.get(url, headers=get_headers(), params=params, timeout=20)
    r.raise_for_status()
    data = r.json()
    collections = data.get("collections", [])
    logger.info(f"üìö –î–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id} –Ω–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
    return collections


def get_negotiations_in_collection(collection_id, vacancy_id):
    """–û—Ç–∫–ª–∏–∫–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (response, phone_interview –∏ —Ç.–ø.)"""
    url = f"{HH_API_BASE}/negotiations/{collection_id}"
    params = {"vacancy_id": vacancy_id}
    r = requests.get(url, headers=get_headers(), params=params, timeout=20)
    r.raise_for_status()
    data = r.json()
    items = data.get("items", [])
    logger.info(f"üí¨ –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_id} ‚Äî {len(items)} –æ—Ç–∫–ª–∏–∫–æ–≤")
    return items


def get_resume_pdf(resume_id, filename):
    """–ü—Ä–æ–±—É–µ—Ç —Å–∫–∞—á–∞—Ç—å PDF-—Ä–µ–∑—é–º–µ"""
    if not resume_id:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç resume_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É PDF")
        return False

    url = f"{HH_API_BASE}/resumes/{resume_id}/download"
    try:
        r = requests.get(url, headers=get_headers(), timeout=15)
        if r.status_code == 404:
            logger.warning(f"‚ö†Ô∏è –†–µ–∑—é–º–µ {resume_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (404)")
            return False
        r.raise_for_status()
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        with open(filename, "wb") as f:
            f.write(r.content)
        logger.info(f"üìÑ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id}: {e}")
        return False
