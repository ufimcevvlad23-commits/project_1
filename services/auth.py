import os
import json
import time
import requests
from dotenv import load_dotenv
from utils.logger import setup_logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("config/credentials.env")
logger = setup_logger()

# === –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
CLIENT_ID = "NGSSI44TJVJD491CUPI2EHDNISAMBFVIDF7U2V3JOVLJ70QABPKTR1HD6C5PSOAJ"
CLIENT_SECRET = "L649P2DAEJ2HKP8OB4P4A3CPU07ATKNG7J4VLDJJA5K2OFG02Q1S2KEVR6Q4FAC6"
REDIRECT_URI = "http://localhost:8000/hh_auth"


# === –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç–æ–∫–µ–Ω–æ–≤ ===
BASE_DIR = os.path.dirname(os.path.dirname(__file__))  # .../bitrix_hh_integration/
TOKENS_PATH = os.path.join(BASE_DIR, "data", "tokens.json")


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def save_tokens(tokens: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã hh.ru –≤ —Ñ–∞–π–ª"""
    os.makedirs(os.path.dirname(TOKENS_PATH), exist_ok=True)
    with open(TOKENS_PATH, "w", encoding="utf-8") as f:
        json.dump(tokens, f, indent=2, ensure_ascii=False)
    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω—ã hh.ru —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {TOKENS_PATH}")


def load_tokens() -> dict | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(TOKENS_PATH):
        with open(TOKENS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    logger.warning("‚ö†Ô∏è –§–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ hh.ru –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None


def get_new_tokens(auth_code: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ authorization_code"""
    url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "authorization_code",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI,
        "code": auth_code,
    }

    r = requests.post(url, data=data)
    if r.status_code != 200:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ hh.ru: {r.status_code} {r.text}")
        r.raise_for_status()

    tokens = r.json()
    tokens["created_at"] = int(time.time())
    save_tokens(tokens)
    return tokens


def refresh_tokens(tokens: dict) -> dict:
    """–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã hh.ru –ø–æ refresh_token"""
    url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "refresh_token",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "refresh_token": tokens["refresh_token"],
    }

    r = requests.post(url, data=data)
    if r.status_code != 200:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ hh.ru: {r.status_code} {r.text}")
        r.raise_for_status()

    new_tokens = r.json()
    new_tokens["created_at"] = int(time.time())
    save_tokens(new_tokens)
    logger.info("üîÅ –¢–æ–∫–µ–Ω—ã hh.ru –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    return new_tokens


def get_valid_token() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π access_token (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"""
    tokens = load_tokens()
    if not tokens:
        raise Exception("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ hh.ru. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ get_new_tokens().")

    expires_in = tokens.get("expires_in", 0)
    created_at = tokens.get("created_at", 0)
    lifetime = time.time() - created_at

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    if lifetime > expires_in - 60:
        logger.info("‚ôªÔ∏è –¢–æ–∫–µ–Ω hh.ru –∏—Å—Ç—ë–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º...")
        tokens = refresh_tokens(tokens)

    return tokens["access_token"]
